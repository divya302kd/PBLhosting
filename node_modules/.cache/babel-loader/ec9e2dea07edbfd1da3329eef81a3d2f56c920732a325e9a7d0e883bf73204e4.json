{"ast":null,"code":"const XHRUtil = {\n  getDataFromApi: async url => {\n    try {\n      const response = await fetch(`${url}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.getItem('authToken')\n        }\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        return result;\n      } else {}\n    } catch (error) {\n      console.error('Network error occurred:', error);\n    }\n  },\n  getDataFromApiWithoutAuth: async url => {\n    try {\n      const response = await fetch(`${url}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        return result;\n      } else {}\n    } catch (error) {\n      console.error('Network error occurred:', error);\n    }\n  },\n  postDataToApi: async (url, formData) => {\n    try {\n      const response = await fetch(`${url}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.getItem('authToken')\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        return result;\n      } else {}\n    } catch (error) {\n      console.error('Network error occurred:', error);\n    }\n  },\n  convertDate: dateString => {\n    let date = new Date(dateString);\n    let month = date.toLocaleString('en-US', {\n      month: 'short'\n    });\n    let day = date.toLocaleString('en-US', {\n      day: '2-digit'\n    });\n    let year = date.getFullYear();\n    return month + \" \" + day + \" \" + year;\n  }\n};\nexport default XHRUtil;","map":{"version":3,"names":["XHRUtil","getDataFromApi","url","response","fetch","method","headers","localStorage","getItem","ok","result","json","console","log","error","getDataFromApiWithoutAuth","postDataToApi","formData","body","JSON","stringify","convertDate","dateString","date","Date","month","toLocaleString","day","year","getFullYear"],"sources":["C:/Users/S554992/Documents/webapps-repos/reactui/src/components/XHRUtil.js"],"sourcesContent":["const XHRUtil  = {\r\n\r\n     getDataFromApi : async (url) => {\r\n\r\n        try {\r\n            const response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('authToken')\r\n                }\r\n            });\r\n\r\n            if (response.ok) {\r\n               const result =  await response.json();\r\n               console.log(result);\r\n               return result;\r\n            } else {\r\n\r\n            }\r\n        } catch (error) {\r\n            console.error('Network error occurred:', error);\r\n        }\r\n    },\r\n\r\n    getDataFromApiWithoutAuth : async (url) => {\r\n\r\n        try {\r\n            const response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result =  await response.json();\r\n                console.log(result);\r\n                return result;\r\n            } else {\r\n\r\n            }\r\n        } catch (error) {\r\n            console.error('Network error occurred:', error);\r\n        }\r\n    },\r\n\r\n    postDataToApi : async (url, formData) => {\r\n\r\n        try {\r\n            const response = await fetch(`${url}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('authToken')\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result =  await response.json();\r\n                console.log(result);\r\n                return result;\r\n            } else {\r\n\r\n            }\r\n        } catch (error) {\r\n            console.error('Network error occurred:', error);\r\n        }\r\n    },\r\n\r\n    convertDate : (dateString) => {\r\n        let date = new Date(dateString);\r\n        let month = date.toLocaleString('en-US', {month: 'short'});\r\n        let day = date.toLocaleString('en-US',{day: '2-digit'});\r\n        let year = date.getFullYear();\r\n        return month +\" \"+ day + \" \" + year\r\n    }\r\n}\r\n\r\nexport default XHRUtil;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAI;EAEZC,cAAc,EAAG,MAAOC,GAAG,IAAK;IAE7B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEF,GAAI,EAAC,EAAE;QACnCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW;QACjE;MACJ,CAAC,CAAC;MAEF,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACd,MAAMC,MAAM,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACrCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QACnB,OAAOA,MAAM;MAChB,CAAC,MAAM,CAEP;IACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD;EACJ,CAAC;EAEDC,yBAAyB,EAAG,MAAOb,GAAG,IAAK;IAEvC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEF,GAAI,EAAC,EAAE;QACnCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAIH,QAAQ,CAACM,EAAE,EAAE;QACb,MAAMC,MAAM,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACrCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QACnB,OAAOA,MAAM;MACjB,CAAC,MAAM,CAEP;IACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD;EACJ,CAAC;EAEDE,aAAa,EAAG,MAAAA,CAAOd,GAAG,EAAEe,QAAQ,KAAK;IAErC,IAAI;MACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEF,GAAI,EAAC,EAAE;QACnCG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW;QACjE,CAAC;QACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,QAAQ;MACjC,CAAC,CAAC;MAEF,IAAId,QAAQ,CAACM,EAAE,EAAE;QACb,MAAMC,MAAM,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACrCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QACnB,OAAOA,MAAM;MACjB,CAAC,MAAM,CAEP;IACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD;EACJ,CAAC;EAEDO,WAAW,EAAIC,UAAU,IAAK;IAC1B,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IAC/B,IAAIG,KAAK,GAAGF,IAAI,CAACG,cAAc,CAAC,OAAO,EAAE;MAACD,KAAK,EAAE;IAAO,CAAC,CAAC;IAC1D,IAAIE,GAAG,GAAGJ,IAAI,CAACG,cAAc,CAAC,OAAO,EAAC;MAACC,GAAG,EAAE;IAAS,CAAC,CAAC;IACvD,IAAIC,IAAI,GAAGL,IAAI,CAACM,WAAW,CAAC,CAAC;IAC7B,OAAOJ,KAAK,GAAE,GAAG,GAAEE,GAAG,GAAG,GAAG,GAAGC,IAAI;EACvC;AACJ,CAAC;AAED,eAAe5B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}